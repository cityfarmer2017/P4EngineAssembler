SNDM  ;
MSKALL ;
SNDMM ;
SNDMP ;
MSKALL ;
SNDH PHV {0:4095} ;
SNDH PLD {32:} ;
SNDH HDR {:32} ;
SNDH HDR;
//SNDH HDR{:};
SNDH ;
SNDP ;
SNDPC ;
SNDP PHV{0:48}, CSUM;
SNDP PLD{:64}, CRC16;
SNDP HDR{16:}, CRC32;
//SNDP PHV{:};
SNDP PHV;
SNDP PHV, CRC32;

END ;

MOVE PHV{0:4}, TMP;

SETH TMP, 65535;
SETH OFFR, 0xFFFF; defer[4];
SETL CTRL, 0b00010101, 0x1010;
SETL XOROT, 0x0101;

ADD TMP, PHV{0:8}, PHV{64:9};
ADDU TMP, CNDR;
ADD TMP, OFFR; defer[ 4 ] ;
ADDU TMP, LENR;

MSKALL ;
CMPCT PHV{0:160}, PHV[0]; delay[1];
MSKADDR 0x1010;
AND PHV{0:511}, PHV[320];
MSKADDR ;
CMPCTR PHV[0];
MSKALL ;
ANDR ; delay[1];
MSKALL ;
ORR ;

END ;

CRC16 PHV {0:4095} ; delay[1], defer[1];
CRC32 PLD {32:} ;
CSUM HDR {:32} ;
CSUM HDR;
MSKALL ;
CRC16MA PHV {0:4095} ;
MSKALL ;
CRC32MO PLD {32:} ; defer[1];
MSKALL ;
CSUMMA HDR {:32} ;

XOR4 PHV{0:8}, PHV[64]; delay[1];
XORR4 META[128];
XOR8 PHV{0:63}, PHV[64];
XORR8 META[128]; delay[1];
XOR16 PHV{0:63}, PHV[64];
XORR16 META[128];
XOR32 PHV{0:63}, PHV[64];
XORR32 META[128];

MSKADDR ;
HASH PHV{0:63}, PHV[64]; delay[1];
MSKADDR ;
HASHR META[128];

END ;

GET++ CNTR[0], 255, PHV{0:32}, LCK;
++GET CNTR[0], 1, PHV{32:64};
GET-- CNTR[0], PHV{0:32};
--GET CNTR[0], PHV{32:64}, ULK;
GET-- 8, PHV{0:32}, LCK;
--GET PHV{32:64}, ULK;
LDC CNTR[0], PHV{0:32}, LCK;
LDC PHV{32:64}, ULK;
LDC CNTR[0], TMP, LCK;
LDC TMP, ULK;

COPY PHV{0:4}, META[172]; defer[4];
COPY PHV{0:2}, PHV[16];
COPY META{0:4}, PHV[32];
COPY META{0:2}, META[16];

END ;

NOP ;

J 100;
JR 0x64;
JR -100;
J 0xff9c;
BEZ 200, 300, CNDR;
BEZ 200, 300, PHV1[1]; delay[4];
BEZ 200, 300, PHV8[8];
BEZ 200, 300, PHV16[16];
//BGT0 200, 300, PHV32[32];
BEZR 200, -300, PHV32[32];
//BGE0R -200, 300, PHV32[32];

RET ;

SNDPC CRC32;

END ;

.import "packages/sample_1.p4d"
.import "packages/sample_2.p4d"
.import "packages/sample_3.p4d"